package fr.sedona.liferay.graphql.util;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import fr.sedona.liferay.graphql.loaders.*;
import org.dataloader.*;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import java.util.concurrent.TimeUnit;

@Component(
        immediate = true,
        service = GraphQLRegistry.class
)
public class GraphQLRegistry extends DataLoaderRegistry {
    private DataLoaderOptions loaderOptions;

{{{registryReferences}}}

    @Activate
    public void activeComponent() {
        prepareLoaderOptions();
        registerLoaders();
    }

    private void prepareLoaderOptions() {
        CacheMap<Long, Object> crossRequestCacheMap = new CacheMap<Long, Object>() {
            Cache<Long, Object> inMemoryCache = Caffeine.newBuilder()
                    .maximumSize(10_000)
                    .expireAfterWrite(5, TimeUnit.MINUTES)
                    .build();

            @Override
            public boolean containsKey(Long key) {
                return inMemoryCache.getIfPresent(key) != null;
            }

            @Override
            public Object get(Long key) {
                return inMemoryCache.getIfPresent(key);
            }

            @Override
            public CacheMap<Long, Object> set(Long key, Object value) {
                inMemoryCache.put(key, value);
                return this;
            }

            @Override
            public CacheMap<Long, Object> delete(Long key) {
                inMemoryCache.invalidate(key);
                return this;
            }

            @Override
            public CacheMap<Long, Object> clear() {
                inMemoryCache.invalidateAll();
                return this;
            }
        };
        loaderOptions = DataLoaderOptions.newOptions()
                .setCacheMap(crossRequestCacheMap)
                .setMaxBatchSize(10);
    }

    private void registerLoaders() {
{{{registryRegisterLoaders}}}
    }

    private void register(String key, BatchLoader batchLoader) {
        register(key, DataLoader.newDataLoader(batchLoader, loaderOptions));
    }
}
