package {{resolversPackagePath}}.impl;

import com.liferay.portal.kernel.exception.NoSuch{{className}}Exception;
import com.liferay.portal.kernel.exception.PortalException;
import {{fqClassName}};
import {{fqServiceName}};
import com.liferay.portal.kernel.service.ServiceContext;
import {{batchLoaderPackagePath}}.{{className}}BatchLoader;
import {{resolversPackagePath}}.{{className}}Resolvers;
import fr.sedona.liferay.graphql.util.GraphQLUtil;
import graphql.execution.ExecutionContext;
import graphql.execution.ExecutionContextBuilder;
import graphql.execution.ExecutionId;
import graphql.schema.DataFetchingEnvironment;
import graphql.schema.DataFetchingEnvironmentImpl;
import org.dataloader.DataLoader;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.Assert.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

/**
 * Test suite for {@link {{className}}ResolversImpl}
 */
@RunWith(PowerMockRunner.class)
public class {{className}}ResolversImplTest {
    private static final long DEFAULT_USER_ID = 456456L;
    private static final long {{classNameUpper}}_ID = 987L;
    private static final long USER_ID = 123L;
{{{testAttributeDeclaration}}}
    private ExecutionId executionId;
    private ExecutionContext executionContext;
    private DataFetchingEnvironment mockEnvironment;
    private DataLoader<Long, {{className}}> dataLoader;

    @InjectMocks
    {{className}}Resolvers resolvers = new {{className}}ResolversImpl();

    @Mock
    private {{className}}LocalService localService;

    @Mock
    private GraphQLUtil graphQLUtil;

    @Before
    public void setUp() {
        executionId = ExecutionId.from("execution-1");
        executionContext = ExecutionContextBuilder.newExecutionContextBuilder()
                .executionId(executionId)
                .build();

        dataLoader = mock(DataLoader.class);
        mockEnvironment = mock(DataFetchingEnvironment.class);
        doReturn(dataLoader)
                .when(mockEnvironment)
                .getDataLoader({{className}}BatchLoader.KEY);
    }

    private void useSimpleGraphQLUtil() {
        (({{className}}ResolversImpl) resolvers).setUtil(new GraphQLUtil());
    }

    private void useMockGraphQLUtil(DataFetchingEnvironment environment, long returnedUserId, boolean isValid) {
        when(graphQLUtil.getLongArg(eq(environment), eq("userId"), anyLong()))
                .thenReturn(returnedUserId);
        if (isValid) {
            when(graphQLUtil.getLongArg(eq(environment), eq("{{classNameLower}}Id")))
                    .thenReturn({{classNameUpper}}_ID);
{{{testUtilAttributeMocks}}}
        } else {
            when(graphQLUtil.getLongArg(eq(environment), anyString()))
                    .thenReturn(0L);
            when(graphQLUtil.getBooleanArg(eq(environment), anyString()))
                    .thenReturn(false);
            when(graphQLUtil.getStringArg(eq(environment), anyString()))
                    .thenReturn("");
        }
    }

    private DataFetchingEnvironment getTestEnvironment(Map<String, Object> arguments) {
        return new DataFetchingEnvironmentImpl(
                null,
                arguments,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                executionId,
                null,
                null,
                executionContext);
    }

    @Test
    public void get{{classNamePlural}}DataFetcher_should_return_the_specified_number_of_objects() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
        arguments.put("start", 3);
        arguments.put("end", 3);
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        List<{{className}}> availableObjects = new ArrayList<>();
        IntStream.rangeClosed(1, 20)
                .forEach(value -> {
                    {{className}} entity = mock({{className}}.class);
                    entity.set{{className}}Id(value);
                    availableObjects.add(entity);
                });
        List<{{className}}> expectedResults = availableObjects.stream()
                .skip(3)
                .limit(3)
                .collect(Collectors.toList());

        // When / Then
        useSimpleGraphQLUtil();
        when(localService.get{{classNamePlural}}(3, 3))
                .thenReturn(expectedResults);

        // Asserts
        List<{{className}}> results = resolvers.get{{classNamePlural}}DataFetcher()
                .get(environment);
        assertNotNull(results);
        assertEquals(expectedResults, results);
    }

    @Test
    public void get{{classNamePlural}}DataFetcher_without_args_should_return_10_first_objects() throws Exception {
        // Given
        DataFetchingEnvironment environment = getTestEnvironment(null);

        List<{{className}}> availableObjects = new ArrayList<>();
        IntStream.rangeClosed(1, 20)
                .forEach(value -> {
                    {{className}} entity = mock({{className}}.class);
                    entity.set{{className}}Id(value);
                    availableObjects.add(entity);
                });
        List<{{className}}> expectedResults = availableObjects.stream()
                .skip(0)
                .limit(10)
                .collect(Collectors.toList());

        // When / Then
        useSimpleGraphQLUtil();
        when(localService.get{{classNamePlural}}(0, 10))
                .thenReturn(expectedResults);

        // Asserts
        List<{{className}}> results = resolvers.get{{classNamePlural}}DataFetcher()
                .get(environment);
        assertNotNull(results);
        assertEquals(expectedResults, results);
    }

    @Test
    public void get{{classNamePlural}}DataFetcher_with_big_range_args_should_return_only_available_objects() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
        arguments.put("start", 0);
        arguments.put("end", 100);
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        List<{{className}}> expectedResults = new ArrayList<>();
        IntStream.rangeClosed(1, 20)
                .forEach(value -> {
                    {{className}} entity = mock({{className}}.class);
                    entity.set{{className}}Id(value);
                    expectedResults.add(entity);
                });

        // When / Then
        useSimpleGraphQLUtil();
        when(localService.get{{classNamePlural}}(0, 100))
                .thenReturn(expectedResults);

        // Asserts
        List<{{className}}> results = resolvers.get{{classNamePlural}}DataFetcher()
                .get(environment);
        assertNotNull(results);
        assertEquals(expectedResults, results);
    }

    @Test
    public void get{{classNamePlural}}DataFetcher_no_objects_available_should_return_empty_list() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
        arguments.put("start", 0);
        arguments.put("end", 100);
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        List<{{className}}> expectedResults = new ArrayList<>();

        // When / Then
        useSimpleGraphQLUtil();
        when(localService.get{{classNamePlural}}(0, 100))
                .thenReturn(expectedResults);

        // Asserts
        List<{{className}}> results = resolvers.get{{classNamePlural}}DataFetcher()
                .get(environment);
        assertNotNull(results);
        assertEquals(expectedResults, results);
    }

    @Test
    public void get{{className}}DataFetcher_should_return_the_searched_object() throws Exception {
        // Given
        {{className}} expectedResult = mock({{className}}.class);
        expectedResult.set{{className}}Id({{classNameUpper}}_ID);

        // When / Then
        useSimpleGraphQLUtil();
        when(mockEnvironment.getArgument("{{classNameLower}}Id"))
                .thenReturn({{classNameUpper}}_ID);
        when(dataLoader.load({{classNameUpper}}_ID))
                .thenReturn(CompletableFuture.supplyAsync(() -> expectedResult));

        // Asserts
        CompletableFuture<{{className}}> asyncResult = resolvers.get{{className}}DataFetcher()
                .get(mockEnvironment);
        assertNotNull(asyncResult);

        {{className}} result = asyncResult.get();
        assertNotNull(result);
        assertEquals(expectedResult, result);
    }

    @Test
    public void get{{className}}DataFetcher_no_specified_id_should_return_null() throws Exception {
        // Given
        // Nothing

        // When / Then
        when(mockEnvironment.getArgument("{{classNameLower}}Id"))
                .thenReturn(0L);

        // Asserts
        CompletableFuture<{{className}}> asyncResult = resolvers.get{{className}}DataFetcher()
                .get(mockEnvironment);
        assertNull(asyncResult);
    }

    @Test
    public void get{{className}}DataFetcher_with_unknown_id_should_return_null() throws Exception {
        // Given
        // Nothing

        // When / Then
        useSimpleGraphQLUtil();
        when(mockEnvironment.getArgument("{{classNameLower}}Id"))
                .thenReturn({{classNameUpper}}_ID);
        when(dataLoader.load({{classNameUpper}}_ID))
                .thenReturn(CompletableFuture.supplyAsync(() -> null));

        // Asserts
        CompletableFuture<{{className}}> asyncResult = resolvers.get{{className}}DataFetcher()
                .get(mockEnvironment);
        assertNotNull(asyncResult);

        {{className}} result = asyncResult.get();
        assertNull(result);
    }

    @Test
    public void create{{className}}DataFetcher_should_return_new_object() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
        arguments.put("userId", USER_ID);
{{{testAddMethodArgumentsMock}}}
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        {{className}} expectedResult = mock({{className}}.class);
        expectedResult.setUserId(USER_ID);
{{{testAddMethodExpectedResultAttributes}}}

        // When / Then
        useMockGraphQLUtil(environment, USER_ID, true);
        when(localService.add{{className}}({{{testAddMethodArgsMock}}}))
                .thenReturn(expectedResult);

        // Asserts
        {{className}} result = resolvers.create{{className}}DataFetcher()
                .get(environment);
        assertNotNull(result);
        assertEquals(expectedResult, result);
    }

    @Test
    public void create{{className}}DataFetcher_without_user_id_should_return_new_object() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
{{{testAddMethodArgumentsMock}}}
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        {{className}} expectedResult = mock({{className}}.class);
        expectedResult.setUserId(DEFAULT_USER_ID);
{{{testAddMethodExpectedResultAttributes}}}

        // When / Then
        useMockGraphQLUtil(environment, DEFAULT_USER_ID, true);
        when(localService.add{{className}}({{{testAddMethodArgsMock}}}))
                .thenReturn(expectedResult);

        // Asserts
        {{className}} result = resolvers.create{{className}}DataFetcher()
                .get(environment);
        assertNotNull(result);
        assertEquals(expectedResult, result);
    }

    @Test(expected = PortalException.class)
    public void create{{className}}DataFetcher_without_args_should_throw_validation_exception() throws Exception {
        // Given
        DataFetchingEnvironment environment = getTestEnvironment(null);

        // When / Then
        useMockGraphQLUtil(environment, DEFAULT_USER_ID, false);
        when(localService.add{{className}}({{{testAddMethodArgsMockAny}}}))
                .thenThrow(PortalException.class);

        // Asserts
        {{className}} result = resolvers.create{{className}}DataFetcher()
                .get(environment);
        assertNull(result);
    }

    @Test
    public void update{{className}}DataFetcher_should_return_updated_object() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
        arguments.put("{{classNameLower}}Id", {{classNameUpper}}_ID);
{{{testUpdateMethodArgumentsMock}}}
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        {{className}} expectedResult = mock({{className}}.class);
        expectedResult.set{{className}}Id({{classNameUpper}}_ID);
{{{testUpdateMethodExpectedResultAttributes}}}

        // When / Then
        useMockGraphQLUtil(environment, USER_ID, true);
        when(localService.update{{className}}({{{testUpdateMethodArgsMock}}}))
                .thenReturn(expectedResult);

        // Asserts
        {{className}} result = resolvers.update{{className}}DataFetcher()
                .get(environment);
        assertNotNull(result);
        assertEquals(expectedResult, result);
    }

    @Test(expected = NoSuch{{className}}Exception.class)
    public void update{{className}}DataFetcher_with_no_id_should_return_null_with_exception() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
{{{testUpdateMethodArgumentsMock}}}
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        // When / Then
        useMockGraphQLUtil(environment, DEFAULT_USER_ID, true);
        when(graphQLUtil.getLongArg(eq(environment), eq("{{classNameLower}}Id")))
                .thenReturn(0L);
        when(localService.update{{className}}({{{testUpdateMethodArgsMock}}}))
                .thenThrow(NoSuch{{className}}Exception.class);

        // Asserts
        {{className}} result = resolvers.update{{className}}DataFetcher()
                .get(environment);
        assertNull(result);
    }

    @Test(expected = NoSuch{{className}}Exception.class)
    public void update{{className}}DataFetcher_with_invalid_id_should_return_null_with_exception() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
        arguments.put("{{classNameLower}}Id", 789456L);
{{{testUpdateMethodArgumentsMock}}}
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        // When / Then
        useMockGraphQLUtil(environment, DEFAULT_USER_ID, true);
        when(graphQLUtil.getLongArg(eq(environment), eq("{{classNameLower}}Id")))
                .thenReturn(789456L);
        when(localService.update{{className}}({{{testUpdateMethodArgsMock}}}))
                .thenThrow(NoSuch{{className}}Exception.class);

        // Asserts
        {{className}} result = resolvers.update{{className}}DataFetcher()
                .get(environment);
        assertNull(result);
    }

    @Test(expected = PortalException.class)
    public void update{{className}}DataFetcher_without_args_should_throw_validation_exception() throws Exception {
        // Given
        DataFetchingEnvironment environment = getTestEnvironment(null);

        // When / Then
        useMockGraphQLUtil(environment, DEFAULT_USER_ID, false);
        when(graphQLUtil.getLongArg(eq(environment), eq("{{classNameLower}}Id")))
                .thenReturn({{classNameUpper}}_ID);
        when(localService.update{{className}}({{{testUpdateMethodArgsMockAny}}}))
                .thenThrow(PortalException.class);

        // Asserts
        {{className}} result = resolvers.update{{className}}DataFetcher()
                .get(environment);
        assertNull(result);
    }

    @Test
    public void delete{{className}}DataFetcher_should_return_deleted_object() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
        arguments.put("{{classNameLower}}Id", {{classNameUpper}}_ID);
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        {{className}} expectedResult = mock({{className}}.class);
        expectedResult.set{{className}}Id({{classNameUpper}}_ID);

        // When / Then
        useMockGraphQLUtil(environment, USER_ID, true);
        when(localService.delete{{className}}(eq({{classNameUpper}}_ID)))
                .thenReturn(expectedResult);

        // Asserts
        {{className}} result = resolvers.delete{{className}}DataFetcher()
                .get(environment);
        assertNotNull(result);
        assertEquals(expectedResult, result);
    }

    @Test(expected = NoSuch{{className}}Exception.class)
    public void delete{{className}}DataFetcher_without_args_should_return_null_with_exception() throws Exception {
        // Given
        DataFetchingEnvironment environment = getTestEnvironment(null);

        {{className}} expectedResult = mock({{className}}.class);
        expectedResult.set{{className}}Id({{classNameUpper}}_ID);

        // When / Then
        useMockGraphQLUtil(environment, USER_ID, true);
        when(localService.delete{{className}}(eq({{classNameUpper}}_ID)))
                .thenThrow(NoSuch{{className}}Exception.class);

        // Asserts
        {{className}} result = resolvers.delete{{className}}DataFetcher()
                .get(environment);
        assertNull(result);
    }

    @Test(expected = NoSuch{{className}}Exception.class)
    public void delete{{className}}DataFetcher_with_invalid_id_should_return_null_with_exception() throws Exception {
        // Given
        Map<String, Object> arguments = new HashMap<>();
        arguments.put("{{classNameLower}}Id", 789456L);
        DataFetchingEnvironment environment = getTestEnvironment(arguments);

        {{className}} expectedResult = mock({{className}}.class);
        expectedResult.set{{className}}Id({{classNameUpper}}_ID);

        // When / Then
        useMockGraphQLUtil(environment, USER_ID, false);
        when(graphQLUtil.getLongArg(eq(environment), eq("{{classNameLower}}Id")))
                .thenReturn(789456L);
        when(localService.delete{{className}}(eq(789456L)))
                .thenThrow(NoSuch{{className}}Exception.class);

        // Asserts
        {{className}} result = resolvers.delete{{className}}DataFetcher()
                .get(environment);
        assertNull(result);
    }
}
