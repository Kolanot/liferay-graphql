package fr.sedona.liferay.graphql.loaders;

import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import {{fqClassName}};
import {{fqServiceName}};
import org.dataloader.BatchLoader;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

@Component(
        immediate = true,
        service = {{className}}BatchLoader.class
)
public class {{className}}BatchLoader implements BatchLoader<Long, {{className}}> {
    public static final String KEY = "{{classNameLower}}";
    private {{className}}LocalService {{classNameLower}}LocalService;

    @Reference(unbind = "-")
    public void set{{className}}LocalService({{className}}LocalService {{classNameLower}}LocalService) {
        this.{{classNameLower}}LocalService = {{classNameLower}}LocalService;
    }

    @Override
    public CompletionStage<List<{{className}}>> load(List<Long> keys) {
        return CompletableFuture.supplyAsync(() -> {
            DynamicQuery query = DynamicQueryFactoryUtil.forClass({{className}}.class);
            query.add(PropertyFactoryUtil.forName("{{classNameLower}}Id")
                    .in(keys.stream()
                            .mapToLong(l -> l)
                            .toArray()));
            return {{classNameLower}}LocalService.dynamicQuery(query);
        });
    }
}
