package fr.sedona.liferay.graphql.engine.impl;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import com.liferay.oauth2.provider.constants.GrantType;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import fr.sedona.liferay.graphql.engine.GraphQLEngine;
{{{engineImports}}}
import fr.sedona.liferay.graphql.scalars.DateScalar;
import fr.sedona.liferay.graphql.scalars.LocalizedStringScalar;
import fr.sedona.liferay.graphql.util.Constants;
import fr.sedona.liferay.graphql.util.GraphQLRegistry;
import graphql.ExecutionInput;
import graphql.ExecutionResult;
import graphql.GraphQL;
import graphql.execution.instrumentation.ChainedInstrumentation;
import graphql.execution.instrumentation.Instrumentation;
import graphql.execution.instrumentation.dataloader.DataLoaderDispatcherInstrumentation;
import graphql.execution.instrumentation.dataloader.DataLoaderDispatcherInstrumentationOptions;
import graphql.execution.instrumentation.tracing.TracingInstrumentation;
import graphql.execution.preparsed.PreparsedDocumentEntry;
import graphql.schema.GraphQLSchema;
import graphql.schema.idl.*;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Component(
    immediate = true,
    service = GraphQLEngine.class
)
public class GraphQLEngineImpl implements GraphQLEngine {
    private static final Log LOGGER = LogFactoryUtil.getLog(GraphQLEngineImpl.class);
    private Cache<String, PreparsedDocumentEntry> cache;
    private GraphQL graphQL;

    @Reference
    private GraphQLRegistry graphQLRegistry;

{{{engineReferences}}}

    @Activate
    public void activateComponent() {
        initializeGraphQLCache();
        initializeEngine();
    }

    private void initializeGraphQLCache() {
        LOGGER.info("Initializing GraphQL cache");
        cache = Caffeine.newBuilder()
                .maximumSize(10_000)
                .expireAfterWrite(5, TimeUnit.MINUTES)
                .build();
    }

    private void initializeEngine() {
        LOGGER.info("Initializing GraphQL engine");
        SchemaParser schemaParser = new SchemaParser();
        TypeDefinitionRegistry typeRegistry = schemaParser.parse(getSchemaFileReader());
        SchemaGenerator schemaGenerator = new SchemaGenerator();
        GraphQLSchema graphQLSchema = schemaGenerator.makeExecutableSchema(typeRegistry, getSchemaWiring());
        graphQL = GraphQL.newGraphQL(graphQLSchema)
                .preparsedDocumentProvider(cache::get)
                .instrumentation(getInstrumentation())
                .build();
    }

    private ChainedInstrumentation getInstrumentation() {
        // Instrumentation for data loader
        List<Instrumentation> chainedList = new ArrayList<>();
        DataLoaderDispatcherInstrumentationOptions options = DataLoaderDispatcherInstrumentationOptions.newOptions()
                .includeStatistics(true);
        chainedList.add(new DataLoaderDispatcherInstrumentation(options));

        // Instrumentation for tracing
        chainedList.add(new TracingInstrumentation());

        return new ChainedInstrumentation(chainedList);
    }

    private BufferedReader getSchemaFileReader() {
        InputStream is = getClass().getResourceAsStream(Constants.SCHEMA_FILE);
        return new BufferedReader(new InputStreamReader(is));
    }

    @Override
    public String getSchema() {
        return getSchemaFileReader().lines()
                .collect(Collectors.joining("\n"));
    }

    private RuntimeWiring getSchemaWiring() {
        LOGGER.info("Loading GraphQL runtime wiring");
        return RuntimeWiring.newRuntimeWiring()
                .scalar(LocalizedStringScalar.INSTANCE)
                .scalar(DateScalar.INSTANCE)
                .type(TypeRuntimeWiring.newTypeWiring("Query")
{{{engineQueries}}}
                )
                .type(TypeRuntimeWiring.newTypeWiring("Mutation")
{{{engineMutations}}}
                )
                .type(TypeRuntimeWiring.newTypeWiring("GrantType")
                        .enumValues(GrantType::valueOf)
                )
                .build();
    }

    @Override
    public ExecutionResult executeQuery(String operationName,
                                        String query,
                                        Map<String, Object> variables) {
        ExecutionInput executionInput = ExecutionInput.newExecutionInput()
                .query(query)
                .variables(variables)
                .operationName(operationName)
                .dataLoaderRegistry(graphQLRegistry)
                .build();
        return graphQL.execute(executionInput);
    }

    @Override
    public ExecutionResult executeQuery(String query) {
        ExecutionInput executionInput = ExecutionInput.newExecutionInput()
                .query(query)
                .dataLoaderRegistry(graphQLRegistry)
                .build();
        return graphQL.execute(executionInput);
    }
}
